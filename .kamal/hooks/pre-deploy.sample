#!/usr/bin/env ruby
# Pre-deploy hook: checks GitHub build status before deploying to production.
# Waits for any pending CI builds to complete (up to 720 seconds) and fails
# if the combined status is not "success".

# Skip checks for rollbacks or non-production deployments
if ENV["KAMAL_COMMAND"] == "rollback" || ENV["KAMAL_DESTINATION"] != "production"
  exit 0
end

require "bundler/inline"

# Quickly install required gems if missing
gemfile(true, quiet: true) do
  source "https://rubygems.org"
  gem "octokit"
  gem "faraday-retry"
end

MAX_ATTEMPTS = 72       # Number of polling attempts
ATTEMPTS_GAP = 10       # Seconds between attempts

# Helper to print an error and exit
def exit_with_error(message)
  $stderr.puts message
  exit 1
end

# Class to check GitHub status for the current commit
class GithubStatusChecks
  attr_reader :remote_url, :git_sha, :github_client, :combined_status

  def initialize
    @remote_url = github_repo_from_remote_url
    @git_sha = `git rev-parse HEAD`.strip
    @github_client = Octokit::Client.new(access_token: ENV["GITHUB_TOKEN"])
    refresh!
  end

  # Refresh the latest status from GitHub
  def refresh!
    @combined_status = github_client.combined_status(remote_url, git_sha)
  end

  # Returns "success", "failure", or "pending"
  def state
    combined_status[:state]
  end

  # URL of the first status check matching the overall state
  def first_status_url
    first_status = combined_status[:statuses].find { |status| status[:state] == state }
    first_status && first_status[:target_url]
  end

  # Number of checks that are complete
  def complete_count
    combined_status[:statuses].count { |status| status[:state] != "pending" }
  end

  # Total number of checks
  def total_count
    combined_status[:statuses].count
  end

  # Human-readable current status
  def current_status
    if total_count > 0
      "Completed #{complete_count}/#{total_count} checks, see #{first_status_url} ..."
    else
      "Build not started..."
    end
  end

  private

  # Extract repo path from git remote URL
  def github_repo_from_remote_url
    url = `git config --get remote.origin.url`.strip.delete_suffix(".git")
    if url.start_with?("https://github.com/")
      url.delete_prefix("https://github.com/")
    elsif url.start_with?("git@github.com:")
      url.delete_prefix("git@github.com:")
    else
      url
    end
  end
end

$stdout.sync = true  # Ensure output appears immediately

# --- Main loop ---
begin
  puts "Checking build status..."
  attempts = 0
  checks = GithubStatusChecks.new

  loop do
    case checks.state
    when "success"
      puts "Checks passed, see #{checks.first_status_url}"
      exit 0
    when "failure"
      exit_with_error "Checks failed, see #{checks.first_status_url}"
    when "pending"
      attempts += 1
    end

    if attempts == MAX_ATTEMPTS
      exit_with_error "Checks are still pending, gave up after #{MAX_ATTEMPTS * ATTEMPTS_GAP} seconds"
    end

    puts checks.current_status
    sleep(ATTEMPTS_GAP)
    checks.refresh!
  end
rescue Octokit::NotFound
  exit_with_error "Build status could not be found"
end
